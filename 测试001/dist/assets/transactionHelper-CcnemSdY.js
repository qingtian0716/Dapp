var K=Object.defineProperty;var Y=(r,e,o)=>e in r?K(r,e,{enumerable:!0,configurable:!0,writable:!0,value:o}):r[e]=o;var j=(r,e,o)=>Y(r,typeof e!="symbol"?e+"":e,o);import{s as f,h as S,R as G}from"./error-DxBeLxpQ.js";const U="jwtToken",x="refreshToken",L="tokenExpiry",M="userRole";function X(r,e,o,t){const n=Date.now()+o*1e3;localStorage.setItem(U,r),localStorage.setItem(x,e),localStorage.setItem(L,n.toString()),t&&localStorage.setItem(M,t)}function Q(){return localStorage.getItem(x)}function Z(){return localStorage.getItem(M)}function z(){localStorage.removeItem(U),localStorage.removeItem(x),localStorage.removeItem(L),localStorage.removeItem(M)}async function J(){try{const r=Q();if(!r)throw new Error("No refresh token available");const e=await fetch("/api/auth/refresh",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({refreshToken:r})});if(!e.ok)throw new Error("Failed to refresh token");const{token:o,newRefreshToken:t,expiresIn:n}=await e.json();return X(o,t,n,Z()),o}catch(r){throw console.error("Token refresh failed:",r),z(),window.location.href="/login",r}}const ee={root:{path:"/",component:"index",script:"../script.js",requireAuth:!1},login:{path:"/login",component:"login",script:"../scripts/login.js"},student:{path:"/student",component:"student",script:"../scripts/student.js",requireAuth:!0},teacher:{path:"/teacher",component:"teacher",script:"../scripts/teacher.js",requireAuth:!0},admin:{path:"/admin",component:"admin",script:"../scripts/admin.js",requireAuth:!0},error:{path:"/error",script:null,component:"error",auth:!1}},te=(r,e)=>{if(r&&r.requiresAuth){const o=localStorage.getItem("jwtToken"),t=window.location.pathname;if(!o)return console.log(`路由守卫: ${r.path||"未知路由"} 需要认证，但未找到 token。重定向到登录页。`),{allowed:!1,redirectTo:`/login?redirect=${encodeURIComponent(t)}`,message:"请先登录"};if(r.role){if(!e)return console.log(`路由守卫: ${r.path} 需要角色 ${r.role}，但 localStorage 中未找到 userRole。`),{allowed:!1,redirectTo:"/error",message:"用户角色信息缺失，请重新登录"};if(r.role!==e)return console.log(`路由守卫: ${r.path} 需要角色 ${r.role}，但用户角色为 ${e}。拒绝访问。`),{allowed:!1,redirectTo:"/error",message:`无权访问该页面，需要 ${r.role} 角色`}}return console.log(`路由守卫: ${r.path||"未知路由"} 认证和角色检查通过。`),{allowed:!0}}return console.log(`路由守卫: ${(r==null?void 0:r.path)||"未知路由"} 不需要认证。允许访问。`),{allowed:!0}};function re(r){const e=JSON.parse(localStorage.getItem("walletEvents")||"[]");e.push(r),localStorage.setItem("walletEvents",JSON.stringify(e)),console.log("钱包事件已保存到本地:",r.walletAddress)}const y=class y{static initialize(e,o){return y.instance||(y.instance=new y(e,o)),y.instance}static getInstance(){if(!y.instance)throw new Error("Web3Helper未初始化,请先调用initialize方法");return y.instance}constructor(e,o){this.web3=e,this.contract=o}async checkConnection(){if(!this.web3||!this.contract)throw new Error("Web3未初始化");const e=await this.web3.eth.getAccounts();if(e.length===0)throw new Error("请先连接钱包");return e[0]}async checkNetwork(){if(!this.web3)throw new Error("Web3未初始化");try{const[e,o,t,n,s]=await Promise.all([this.web3.eth.getChainId(),this.web3.eth.net.isListening(),this.web3.eth.net.getId(),this.web3.eth.getBlockNumber().catch(()=>null),this.web3.eth.getGasPrice().catch(()=>null)]);if(!o)throw new Error("网络连接已断开");n===null&&console.warn("无法获取最新区块号，节点可能存在同步问题");const i={1:"Ethereum Mainnet",3:"Ropsten Testnet",4:"Rinkeby Testnet",5:"Goerli Testnet",42:"Kovan Testnet",56:"BSC Mainnet",97:"BSC Testnet",137:"Polygon Mainnet",80001:"Polygon Mumbai",31337:"Hardhat Network",1337:"Local Network",11155111:"Sepolia Testnet",84531:"Base Goerli Testnet",8453:"Base Mainnet",10:"Optimism Mainnet",420:"Optimism Goerli",42161:"Arbitrum One",421613:"Arbitrum Goerli"},l=i[e]||"Unknown Network";console.log(`当前连接网络: ${l} (${e})`);const a=Object.keys(i).includes(e.toString());return a||console.warn(`不支持的网络类型: ${l} (${e})`),{chainId:e,networkId:t,networkName:l,blockNumber:n,gasPrice:s?this.web3.utils.fromWei(s,"gwei")+" Gwei":null,isSupported:a,isValid:o&&n!==null}}catch(e){throw console.error("网络检查失败:",e),new Error(e.message||"网络连接异常,请检查MetaMask网络设置")}}isValidAddress(e){return this.web3.utils.isAddress(e)}static handleContractError(e){console.error("合约操作失败:",e);const o={"Internal JSON-RPC error":"区块链网络连接异常，系统将切换到离线模式。建议检查网络连接或重启MetaMask","User denied transaction":"您取消了交易","nonce too low":"交易序号过低，请重新发送交易","insufficient funds":"账户余额不足","gas required exceeds allowance":"所需gas超过限制","execution reverted":"合约执行失败","replacement transaction underpriced":"替换交易价格过低","known transaction":"重复的交易","connection refused":"无法连接到服务器，系统将切换到离线模式","Failed to fetch":"网络请求失败，系统将切换到离线模式","Network Error":"网络连接异常，系统将切换到离线模式",timeout:"请求超时，系统将切换到离线模式",ERR_CONNECTION_REFUSED:"连接被拒绝，系统将切换到离线模式","net::ERR_CONNECTION_REFUSED":"服务器连接失败，系统将切换到离线模式","net::ERR_NETWORK_CHANGED":"网络已更改，请刷新页面","net::ERR_INTERNET_DISCONNECTED":"网络已断开，请检查网络连接","Only admin":"只有管理员才能执行此操作","Invalid teacher":"无效的教师地址或该地址已经是教师","Student not found":"学生不存在，请检查学号","Invalid score":"无效的分数，请确保分数在0-100之间",unauthorized:"未授权的操作","invalid parameters":"无效的参数"};for(const[t,n]of Object.entries(o))if(e.message.includes(t))return n;return"操作失败: "+e.message}static createCache(e=5*60*1e3){return{data:null,timestamp:null,expirationTime:e,isValid(){return this.data&&this.timestamp&&Date.now()-this.timestamp<this.expirationTime},update(o){this.data=o,this.timestamp=Date.now()},clear(){this.data=null,this.timestamp=null}}}static async batchProcess(e,o,t={}){const{onProgress:n,onError:s,stopOnError:i=!1}=t;let l=0,a=0;for(const c of e)try{await o(c),l++,n&&n(l,a,e.length)}catch(m){if(a++,s&&s(c,m),i)throw m}return{successCount:l,failureCount:a}}async retryOperation(e,o=null,t={}){const n={maxRetries:3,initialDelay:1e3,maxDelay:15e3,timeout:8e3,checkNetworkBeforeRetry:!0,retryableErrors:["Internal JSON-RPC error","connection error","timeout","nonce too low","replacement transaction underpriced","known transaction","insufficient funds","gas required exceeds allowance","execution reverted","network error","invalid response","operation timeout"],nonRetryableErrors:["User denied","User rejected","canceled","rejected","unauthorized","invalid parameters"],onRetry:null,...t};let s,i=null;for(let a=1;a<=n.maxRetries;a++)try{if(a>1&&n.checkNetworkBeforeRetry)try{i=await this.checkNetwork(),i.isValid||console.warn(`网络状态异常，但仍将尝试操作 (尝试 ${a}/${n.maxRetries})`)}catch(u){console.warn(`重试前网络检查失败 (尝试 ${a}/${n.maxRetries}):`,u)}const c=new Promise((u,w)=>{setTimeout(()=>w(new Error("操作超时")),n.timeout)}),m=await Promise.race([e(),c]);if(m==null)throw new Error("操作返回值无效");return m}catch(c){s=c;const m=c.message||"未知错误";if(n.nonRetryableErrors.some(h=>m.toLowerCase().includes(h.toLowerCase())))throw console.log(`遇到不可重试的错误: ${m}`),c;const w=n.retryableErrors.some(h=>m.toLowerCase().includes(h.toLowerCase()));if(m.includes("Internal JSON-RPC error")?console.warn(`网络错误，第${a}次重试:`,m):console.warn(`操作失败，第${a}次重试:`,c),n.onRetry)try{n.onRetry(a,c,i)}catch(h){console.warn("重试回调函数执行失败:",h)}if(a<n.maxRetries){let h=n.initialDelay*Math.pow(2,a-1);w&&(h=Math.max(h,3e3)),h=Math.min(h,n.maxDelay);const p=Math.random()*.3+.85;h=Math.floor(h*p),console.log(`将在 ${h}ms 后进行第 ${a+1} 次重试...`),await new Promise(g=>setTimeout(g,h))}}const l=(s==null?void 0:s.message)||"未知错误";if(console.error(`操作失败，已达到最大重试次数(${n.maxRetries}):`,l),o)try{return console.log("尝试执行回退操作..."),await o(s,i)}catch(a){throw console.error("回退操作失败:",a),new Error(`主操作和回退操作均失败: ${l} -> ${a.message}`)}throw s.message.includes("Internal JSON-RPC error")?new Error("区块链网络连接失败，请检查MetaMask连接状态和网络设置"):s.message.includes("gas required exceeds allowance")?new Error("交易所需gas超出账户余额，请确保有足够的ETH支付gas费"):s.message.includes("insufficient funds")?new Error("账户余额不足，无法完成交易"):s.message.includes("nonce too low")?new Error("交易nonce值过低，可能是由于之前的交易已经被确认"):s.message.includes("replacement transaction underpriced")?new Error("替换交易的gas价格过低，无法替换之前的交易"):s}listenToContractEvent(e,o={},t){if(!this.contract)throw new Error("合约未初始化");const s={...{fromBlock:"latest",toBlock:"latest",filter:{}},...o};return console.log(`开始监听合约事件: ${e}`,s),this.contract.events[e](s).on("data",i=>{console.log(`接收到合约事件 ${e}:`,i),t&&t(null,i)}).on("error",i=>{console.error(`合约事件 ${e} 监听错误:`,i),t&&t(i,null)})}async getTransactionReceipt(e,o=1,t=6e4){if(!this.web3)throw new Error("Web3未初始化");const n=Date.now();let s=null;for(;Date.now()-n<t;)try{if(s=await this.web3.eth.getTransactionReceipt(e),!s){await new Promise(a=>setTimeout(a,2e3));continue}if(o<=0)return s;const l=await this.web3.eth.getBlockNumber()-s.blockNumber+1;if(l>=o)return s;console.log(`交易 ${e} 已有 ${l}/${o} 个确认...`),await new Promise(a=>setTimeout(a,3e3))}catch(i){console.warn(`获取交易收据失败: ${i.message}，将重试...`),await new Promise(l=>setTimeout(l,2e3))}throw new Error(`获取交易收据超时: ${e}`)}async estimateGas(e,o={}){if(!this.web3||!this.contract)throw new Error("Web3或合约未初始化");try{const t=await this.web3.eth.getAccounts();if(t.length===0)throw new Error("未连接钱包账户");const n={from:o.from||t[0],...o},s=await e.estimateGas(n),l=Math.ceil(s*1.2),a=await this.web3.eth.getGasPrice(),c=this.web3.utils.fromWei((BigInt(l)*BigInt(a)).toString(),"ether");return{gasEstimate:s,safeGasLimit:l,gasPrice:this.web3.utils.fromWei(a,"gwei")+" Gwei",estimatedFee:c+" ETH"}}catch(t){throw console.error("估算gas失败:",t),new Error(`估算交易gas失败: ${t.message}`)}}async sendTransactionWithTracking(e,o={}){if(!this.web3||!this.contract)throw new Error("Web3或合约未初始化");const t={from:null,value:0,gasPrice:null,gasLimit:null,nonce:null,confirmations:1,onSubmitted:null,onConfirmed:null,onError:null,onProgress:null,onSuccess:null,onComplete:null,waitForConfirmations:!0,showGasEstimation:!0,retryOnFailure:!0,maxRetries:2,operationName:"区块链操作",saveToHistory:!0,...o};try{try{const c=await this.checkNetwork();if(!c.isValid)throw new Error(`网络状态异常: ${c.networkName}`);console.log(`[${t.operationName}] 当前网络: ${c.networkName}`)}catch(c){console.warn(`[${t.operationName}] 网络检查失败:`,c)}const n=await this.web3.eth.getAccounts();if(n.length===0)throw new Error("未连接钱包账户");const s={from:t.from||n[0],value:t.value>0?this.web3.utils.toWei(t.value.toString(),"ether"):0};if(t.gasPrice&&(s.gasPrice=this.web3.utils.toWei(t.gasPrice.toString(),"gwei")),t.gasLimit)s.gas=t.gasLimit;else try{t.showGasEstimation&&console.log(`[${t.operationName}] 正在估算Gas...`);const c=await e.estimateGas({...s});if(s.gas=Math.ceil(c*1.2),t.showGasEstimation){const m=await this.web3.eth.getGasPrice(),u=this.web3.utils.fromWei((BigInt(s.gas)*BigInt(m)).toString(),"ether");console.log(`[${t.operationName}] Gas估算: ${s.gas} (约 ${u} ETH)`)}}catch(c){console.warn(`[${t.operationName}] Gas估算失败，将使用默认值:`,c),s.gas=3e6}t.nonce!==null&&(s.nonce=t.nonce),console.log(`[${t.operationName}] 准备发送交易，参数:`,s),t.onProgress&&t.onProgress({stage:"preparing",message:"正在准备交易...",details:{txParams:s},timestamp:new Date().toISOString()});const i=async()=>new Promise((c,m)=>{e.send(s).on("transactionHash",u=>{if(console.log(`[${t.operationName}] 交易已提交，哈希:`,u),t.saveToHistory)try{const w=JSON.parse(localStorage.getItem("txHistory")||"[]");w.push({hash:u,operation:t.operationName,status:"pending",timestamp:new Date().toISOString(),from:s.from}),localStorage.setItem("txHistory",JSON.stringify(w))}catch(w){console.warn("保存交易历史失败:",w)}t.onProgress&&t.onProgress({stage:"submitted",message:"交易已提交到区块链",details:{hash:u},timestamp:new Date().toISOString()}),t.onSubmitted&&t.onSubmitted(u)}).on("receipt",u=>{if(console.log(`[${t.operationName}] 收到交易收据:`,u),t.saveToHistory)try{const h=JSON.parse(localStorage.getItem("txHistory")||"[]").map(p=>p.hash===u.transactionHash?{...p,status:u.status?"success":"failed",blockNumber:u.blockNumber,gasUsed:u.gasUsed}:p);localStorage.setItem("txHistory",JSON.stringify(h))}catch(w){console.warn("更新交易历史失败:",w)}t.onProgress&&t.onProgress({stage:"mined",message:"交易已被矿工打包",details:{receipt:u},timestamp:new Date().toISOString()}),(!t.waitForConfirmations||t.confirmations<=0)&&c(u)}).on("confirmation",(u,w)=>{console.log(`[${t.operationName}] 交易确认 #${u}:`,w.transactionHash),t.onProgress&&t.onProgress({stage:"confirming",message:`交易确认中 (${u}/${t.confirmations})`,details:{confirmationNumber:u,receipt:w},timestamp:new Date().toISOString()}),t.onConfirmed&&t.onConfirmed(u,w),u>=t.confirmations&&(t.onProgress&&t.onProgress({stage:"confirmed",message:"交易已确认",details:{confirmationNumber:u,receipt:w},timestamp:new Date().toISOString()}),c(w))}).on("error",u=>{if(console.error(`[${t.operationName}] 交易错误:`,u),t.saveToHistory&&u.receipt)try{const h=JSON.parse(localStorage.getItem("txHistory")||"[]").map(p=>p.hash===u.receipt.transactionHash?{...p,status:"error",error:u.message}:p);localStorage.setItem("txHistory",JSON.stringify(h))}catch(w){console.warn("更新交易历史失败:",w)}t.onProgress&&t.onProgress({stage:"error",message:"交易执行出错",details:{error:u},timestamp:new Date().toISOString()}),t.onError&&t.onError(u),m(u)})});let l;if(t.retryOnFailure?l=await this.retryOperation(i,null,{maxRetries:t.maxRetries,onRetry:(c,m)=>{console.log(`[${t.operationName}] 交易失败，尝试重试 (${c}/${t.maxRetries})...`),t.onProgress&&t.onProgress({stage:"retrying",message:`交易失败，正在重试 (${c}/${t.maxRetries})`,details:{attempt:c,error:m},timestamp:new Date().toISOString()})}}):l=await i(),!l.status){const c=new Error("交易执行失败，但已被区块链接受");throw t.onProgress&&t.onProgress({stage:"failed",message:"交易已上链但执行失败",details:{receipt:l},timestamp:new Date().toISOString()}),c}t.onProgress&&t.onProgress({stage:"completed",message:"交易已成功完成",details:{receipt:l},timestamp:new Date().toISOString()});const a={success:!0,receipt:l,transactionHash:l.transactionHash,blockNumber:l.blockNumber,gasUsed:l.gasUsed,events:l.events||{}};return t.onSuccess&&t.onSuccess(a),t.onComplete&&t.onComplete(a),a}catch(n){throw console.error(`[${t.operationName}] 发送交易失败:`,n),t.onError&&t.onError(n),t.onComplete&&t.onComplete({success:!1,error:y.handleContractError(n)}),n}}decodeTransactionInput(e){if(!this.web3||!this.contract)throw new Error("Web3或合约未初始化");try{const o=this.contract.options.jsonInterface,t=e.slice(0,10),n=o.find(a=>a.type==="function"&&this.web3.utils.sha3(`${a.name}(${a.inputs.map(c=>c.type).join(",")})`).slice(0,10)===t);if(!n)return{method:"未知方法",params:[],raw:e};const s=e.slice(10),i=this.web3.eth.abi.decodeParameters(n.inputs,s),l={};return n.inputs.forEach((a,c)=>{l[a.name||c]=i[c]}),{method:n.name,params:l,raw:e}}catch(o){return console.error("解码交易输入数据失败:",o),{method:"解码失败",params:[],raw:e,error:o.message}}}async getContractEventHistory(e,o={}){if(!this.web3||!this.contract)throw new Error("Web3或合约未初始化");const n={...{fromBlock:0,toBlock:"latest",filter:{},maxResults:1e3},...o};console.log(`获取合约事件历史: ${e}`,n);try{const s=await this.contract.getPastEvents(e,{fromBlock:n.fromBlock,toBlock:n.toBlock,filter:n.filter}),i=s.slice(0,n.maxResults);return s.length>n.maxResults&&console.warn(`事件结果数量(${s.length})超过限制(${n.maxResults})，已截断`),await Promise.all(i.map(async a=>{let c=null;try{const m=await this.web3.eth.getBlock(a.blockNumber);c=m?new Date(m.timestamp*1e3).toISOString():null}catch(m){console.warn(`获取区块时间戳失败: ${m.message}`)}return{id:`${a.blockNumber}-${a.logIndex}`,blockNumber:a.blockNumber,transactionHash:a.transactionHash,timestamp:c,event:a.event,returnValues:a.returnValues,raw:a}}))}catch(s){throw console.error(`获取合约事件历史失败: ${s.message}`),new Error(`获取事件历史失败: ${s.message}`)}}async executeContractMethod(e,o=[],t={}){if(!this.web3||!this.contract)throw new Error("Web3或合约未初始化");if(!this.contract.methods[e])throw new Error(`合约方法 ${e} 不存在`);try{const n=await this.checkConnection();console.log(`准备执行合约方法: ${e}，当前账户: ${n}`);const s=this.contract.methods[e](...o),l={...{from:n,operationName:`执行合约方法: ${e}`,showConfirmationModal:!0,confirmationMessage:`您正在执行操作: ${e}，此操作将上链并消耗gas费用，是否确认？`,waitForConfirmations:!0,confirmations:1,showGasEstimation:!0,onBeforeSubmit:null,onSubmitted:null,onConfirmed:null,onError:null,onProgress:null,onSuccess:null,onComplete:null},...t};let a=null;if(l.showGasEstimation)try{a=await this.estimateGas(s,{from:l.from}),console.log("Gas估算结果:",a)}catch(w){console.warn(`Gas估算失败: ${w.message}`)}if(l.showConfirmationModal){let w=l.confirmationMessage;if(a&&(w+=`

预估Gas: ${a.safeGasLimit} (约 ${a.estimatedFee})`),!window.confirm(w))throw console.log("用户取消了操作"),new Error("用户取消了操作")}l.onBeforeSubmit&&await l.onBeforeSubmit({method:e,args:o,options:l,gasEstimation:a}),l.onProgress&&l.onProgress({stage:"preparing",message:"正在准备交易...",details:{method:e,args:o,options:l}});const c=await this.sendTransactionWithTracking(s,{...l,onProgress:w=>{l.onProgress&&l.onProgress({...w,method:e,args:o})}});console.log(`合约方法 ${e} 执行成功:`,c);const m={};c.receipt&&c.receipt.events&&Object.entries(c.receipt.events).forEach(([w,h])=>{m[w]={event:h.event,returnValues:h.returnValues,raw:h}});const u={success:!0,method:e,args:o,transactionHash:c.transactionHash,blockNumber:c.blockNumber,gasUsed:c.gasUsed,events:m,receipt:c.receipt};return l.onSuccess&&l.onSuccess(u),l.onComplete&&l.onComplete(u),u}catch(n){console.error(`执行合约方法 ${e} 失败:`,n);const s={success:!1,method:e,args:o,error:y.handleContractError(n)};throw t.onError&&t.onError(s),t.onComplete&&t.onComplete(s),n}}};j(y,"instance",null);let C=y;const k=window.location.origin;async function D(){try{if(!await B())return!1;if(!T&&(T=C.initialize(b,P),!T))throw new Error("Web3Helper初始化失败");if(!d)return f("钱包连接失败，请重试","error"),!1;const e=document.getElementById("walletAddress");return e&&(e.textContent=d),f(`钱包连接成功: ${d.substring(0,8)}...`,"success"),!0}catch(r){return S(r,"钱包连接失败"),!1}}let b,P,d,T;async function B(){if(typeof window.ethereum>"u")return S(new Error("请安装MetaMask钱包"));try{return b=new Web3(window.ethereum),!(!await oe()||!await ne())}catch(r){return S(r,"Web3初始化失败")}}async function oe(){if(!window.ethereum)throw new Error("MetaMask未安装");try{const r=await Promise.resolve(window.ethereum.request({method:"eth_requestAccounts"}));if(!Array.isArray(r)||r.length===0)throw new Error("无法获取MetaMask账户");return d=r[0],console.log("当前选择的MetaMask账户:",d),r}catch(r){return console.error("MetaMask账户请求失败:",r),S(r,"获取MetaMask账户失败")}}async function ne(){try{if(!b||!b.eth)throw new Error("Web3实例未正确初始化");const r="/abi/YourCollectible_ABI.json",e="/address/YourCollectible_address.json",[o,t]=await Promise.all([fetch(r),fetch(e)]);if(!o.ok)throw new Error("ABI文件加载失败");if(!t.ok)throw new Error("合约地址文件加载失败");const[n,s]=await Promise.all([o.json(),t.json()]);if(!s.contractAddress)throw new Error("合约地址未定义或无效");if(!b.utils.isAddress(s.contractAddress))throw new Error("无效的合约地址格式");if(P=new b.eth.Contract(n,s.contractAddress),!P.methods)throw new Error("合约实例初始化失败");return console.log("合约初始化成功,地址:",s.contractAddress),!0}catch(r){return C.handleContractError(r)}}async function F(r){const e=localStorage.getItem("userRole"),o=localStorage.getItem("jwtToken");if(o&&e)try{const t=await fetch("/api/auth/verify",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o}`},body:JSON.stringify({token:o})}),n=await t.json();if(t.ok&&n.success)return e;localStorage.removeItem("jwtToken"),localStorage.removeItem("refreshToken"),localStorage.removeItem("tokenExpiry"),localStorage.removeItem("userRole")}catch(t){console.error("验证token失败:",t)}try{const t=await fetch(`${k}/api/users/role/${r.toLowerCase()}`,{headers:{Authorization:o?`Bearer ${o}`:"","Content-Type":"application/json"}});if(t.status===401){try{const n=await J();if(n){const s=await fetch(`${k}/api/users/role/${r.toLowerCase()}`,{headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/json"}});if(s.ok){const i=await s.json();if(i.success&&i.role)return localStorage.setItem("userRole",i.role),i.role}}}catch(n){console.error("刷新token失败:",n)}throw new Error("未授权，请重新登录")}if(t.ok){const n=await t.json();if(n.success&&n.role)return localStorage.setItem("userRole",n.role),n.role}throw new Error("获取角色信息失败")}catch(t){if(console.error("从API获取角色失败:",t),e)return e;throw t}}async function I(r=!1){try{let e;const o=localStorage.getItem("networkIssueDetected")==="true";if(r||o)return console.log("使用离线模式进行用户认证"+(o?" (检测到网络问题)":"")),e=localStorage.getItem("userRole"),!e||!["admin","teacher","student"].includes(e)?(console.error("离线模式下没有有效的角色信息"),!1):(localStorage.setItem("userRole",e),f(`离线模式：使用缓存的${e}角色`,"info"),o&&!r&&setTimeout(()=>{localStorage.removeItem("networkIssueDetected"),console.log("网络问题标志已清除，下次将尝试在线模式")},30*60*1e3),!0);let t=0;const n=5;let s=1e3;const i=localStorage.getItem("userRole");for(;t<n;)try{const a=new AbortController,c=setTimeout(()=>a.abort(),5e3);try{const m=await fetch(`${k}/api/users/${d}`,{headers:{Authorization:`Bearer ${localStorage.getItem("jwtToken")}`,"Content-Type":"application/json"},signal:a.signal});if(clearTimeout(c),!m.ok){if(m.status===401)try{await J(),t++;continue}catch(w){if(console.error("Token刷新失败:",w),f("登录已过期，请重新登录","error"),i&&["admin","teacher","student"].includes(i)){console.log("使用缓存角色作为备选:",i),e=i;break}return!1}throw new Error(`请求失败: ${m.status}`)}const u=await m.json();if(u.exists){e=u.role;break}else try{e=await F(d);break}catch(w){if(console.warn("从智能合约获取角色失败，尝试使用缓存:",w),i&&["admin","teacher","student"].includes(i)){console.log("使用缓存角色作为备选:",i),e=i;break}throw w}}catch(m){throw clearTimeout(c),m.name==="AbortError"&&console.warn("API请求超时"),m}}catch(a){if(console.error(`第${t+1}次尝试失败:`,a),t++,t===n){if(i&&["admin","teacher","student"].includes(i)){console.log("所有尝试失败，使用缓存角色:",i),e=i;break}return f("获取用户角色失败，请稍后重试","error"),!1}s=Math.min(s*1.5,8e3),console.log(`等待${s}毫秒后重试...`),await new Promise(c=>setTimeout(c,s))}const l=localStorage.getItem("userRole");if(!["admin","teacher","student"].includes(e))return f("您没有访问权限,请联系管理员","error"),!1;try{if(r){console.log("离线模式：跳过用户检查API请求");const g={exists:!1};return localStorage.setItem("userRole",e),!0}const a=3;let c=0,m,u=1e3,w;for(;c<a;)try{const g=new AbortController,E=setTimeout(()=>g.abort(),5e3);try{m=await fetch(`${k}/api/users/check/${d}`,{signal:g.signal}),clearTimeout(E),w=await m.json();break}catch($){throw clearTimeout(E),$.name==="AbortError"&&console.warn("API请求超时"),$}}catch(g){if(c++,console.warn(`用户检查API请求失败(${c}/${a}):`,g),c===a){console.error("数据库连接失败，将使用本地缓存"),w={exists:!1};break}u=Math.min(u*1.5,5e3),await new Promise(E=>setTimeout(E,u))}if(r)return console.log("离线模式：跳过用户注册"),localStorage.setItem("userRole",e),!0;if(w.exists)await fetch(`${k}/api/users/${d}/login`,{method:"PUT",headers:{"Content-Type":"application/json"}});else{const E={username:`user_${d.slice(2,8)}`,walletAddress:d,role:e,name:`${e.charAt(0).toUpperCase()+e.slice(1)} User`,status:"active",lastLogin:new Date().toISOString(),roleVerified:!0};e==="student"&&(E.studentId=`ST${Date.now().toString().slice(-6)}`),c=0;let $=1e3,H=!1;for(;c<a;)try{const A=new AbortController,N=setTimeout(()=>A.abort(),8e3);try{const R=await fetch(`${k}/api/users`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${localStorage.getItem("jwtToken")}`},body:JSON.stringify(E),signal:A.signal});if(clearTimeout(N),!R.ok){const V=await R.json();throw new Error(V.message||"用户注册失败")}f("用户信息已成功登记","success"),H=!0;break}catch(R){throw clearTimeout(N),R.name==="AbortError"&&console.warn("用户注册API请求超时"),R}}catch(A){if(c++,console.warn(`用户注册第${c}次尝试失败:`,A),c===a){console.error("用户注册失败，将继续使用本地角色");break}$=Math.min($*1.5,8e3),console.log(`等待${$}毫秒后重试注册...`),await new Promise(N=>setTimeout(N,$))}H||(console.log("用户注册失败，但仍将使用角色:",e),f("用户信息登记失败，将使用离线模式","warning"))}l&&l!==e&&(localStorage.removeItem("walletEvents"),localStorage.removeItem("jwtToken"),f(`您的角色已从${l}变更为${e}`,"info"));const h=window.location.pathname,p=`/${e}`;if(!h.includes(p))return f(`正在跳转到${e}页面...`,"info"),await se(e),!0;localStorage.setItem("userRole",e),f(`钱包连接成功,您的角色是: ${e}`,"success");try{(await Promise.allSettled([O(d,"walletConnected"),O(d,"roleAssigned",{role:e})])).forEach((E,$)=>{E.status==="rejected"&&console.warn(`后端通信部分失败(${$}):`,E.reason)})}catch(g){console.error("后端通信完全失败:",g)}try{if(!await loginUser(d,e))return r?(console.log("离线模式：跳过登录验证"),!0):(console.warn("登录验证失败，尝试使用离线模式"),localStorage.setItem("userRole",e),f("登录验证失败，将使用离线模式","warning"),!0)}catch(g){console.error("登录过程发生错误:",g),localStorage.setItem("userRole",e),f("登录过程出错，将使用离线模式","warning")}return!0}catch(a){return console.error("用户认证处理失败:",a),S(a,"用户认证失败")}}catch(e){return S(e,"角色检测或登录失败")}}async function se(r){try{const e=ee[r];if(!e||!e.path)throw new Error(`无效的${r}角色路由配置`);const o=e.path;if(window.location.pathname===o)return console.log("用户已在对应角色页面"),!0;const n=te(e,r);if(!n.allowed)throw new Error(n.message||"无访问权限");if(router||(router=new G,router.init()),console.log(`正在导航到${r}页面: ${o}`),await router.navigate(o))return console.log(`已成功导航到${r}页面: ${o}`),!0;throw new Error(`导航到${r}页面失败`)}catch(e){return console.error("角色导航错误:",e),f(e.message,"error"),!1}}function ae(r){document.querySelectorAll(".nav-link").forEach(e=>{e.style.display="inline-block"}),r!=="admin"&&[".user-info-card",".teacher-management-card",".system-monitor-card",".system-log-card",".settings-card"].forEach(o=>{document.querySelectorAll(o).forEach(t=>{t.style.display="none"})})}function ie(){const r=localStorage.getItem("jwtToken");return r||(console.warn("未找到认证令牌,请先登录"),null)}function ce(r,e,o){return r&&r.eventType===o&&r.walletAddress===e&&new Date().getTime()-new Date(r.timestamp).getTime()<3e5}async function O(r,e="connect",o={}){try{const t=ie();if(!t)return!1;const n=JSON.parse(localStorage.getItem("walletEvents")||"[]"),s=n[n.length-1];if(ce(s,null,r,e)){console.log("跳过重复事件:",e);return}const i={walletAddress:r,eventType:e,timestamp:new Date().toISOString(),...o};re(i);const l=await fetch(`${k}/api/wallet/address`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify(i)});if(l.status===401||l.status===403){console.warn("认证失败或无权限,请重新登录"),localStorage.removeItem("jwtToken"),window.location.href="/login";return}const a=l.headers.get("content-type");return a&&a.includes("application/json")&&(await l.json()).success?(console.log("钱包地址已发送到后端:",r),!0):!1}catch(t){return console.error("发送钱包地址失败:",t),f("发送钱包地址失败，请稍后重试","error"),!1}}async function le(r){try{if(!d)return f("请先连接钱包","warning"),!1;if(!["admin","teacher","student"].includes(r))return f("无效的角色选择","error"),!1;const e=localStorage.getItem("userRole");if(localStorage.getItem("networkIssueDetected")==="true"&&e===r&&(console.log("检测到网络问题，直接使用离线模式"),await I(!0)))return f(`使用缓存角色: ${r}（离线模式）`,"info"),!0;if(!T){if(!b||!P)try{if(!await B())return e===r&&(console.log("Web3初始化失败，使用缓存角色:",e),localStorage.setItem("networkIssueDetected","true"),await I(!0))?(f(`使用缓存角色: ${r}（离线模式）`,"info"),!0):(f("Web3初始化失败","error"),!1)}catch(a){return console.error("Web3初始化错误:",a),(a.message.includes("Internal JSON-RPC error")||a.message.includes("Failed to fetch")||a.message.includes("ERR_CONNECTION_REFUSED"))&&e===r&&(console.log("检测到连接错误，使用缓存角色:",e),localStorage.setItem("networkIssueDetected","true"),await I(!0))?(f(`使用缓存角色: ${r}（离线模式）`,"info"),!0):(f("Web3初始化失败: "+a.message,"error"),!1)}try{if(T=C.initialize(b,P),!T)return f("Web3Helper初始化失败","error"),!1}catch(a){return console.error("Web3Helper初始化错误:",a),!1}}let t=null,n=0;const s=3;let i=1e3;for(;n<s&&!t;)try{if(t=await F(d),!t)throw new Error("未获取到用户角色")}catch(a){if(console.warn(`获取角色第${n+1}次尝试失败:`,a),n++,n===s)if(e===r)console.log("角色验证失败，使用缓存角色:",e),t=e;else return f("获取用户角色失败","error"),!1;else i=Math.min(i*1.5,5e3),await new Promise(c=>setTimeout(c,i))}return t!==r?(f("您没有该角色的权限","error"),!1):await I(!1)?(localStorage.setItem("userRole",r),localStorage.setItem("lastConnectedAddress",d),ae(r),!0):e===r&&(console.log("在线认证失败，尝试离线模式"),await I(!0))?(f(`使用缓存角色: ${r}（离线模式）`,"info"),!0):!1}catch(e){console.error("角色选择过程中发生错误:",e);const o=localStorage.getItem("userRole");if(o===r){console.log("发生错误，尝试使用缓存角色:",o);try{if(await I(!0))return f(`使用缓存角色: ${r}（离线模式）`,"info"),!0}catch(t){console.error("离线模式也失败:",t)}}return S(e,"角色选择失败")}}let W;async function ue(){try{W=new G,W.init(),fe(),we(),await me()}catch(r){S(r,"应用初始化失败")}}function fe(){const r=localStorage.getItem("jwtToken"),e=localStorage.getItem("userRole");r?e&&f(`欢迎回来，您的角色是: ${e}`,"success"):f("请连接钱包并登录","info")}function we(){document.querySelectorAll("#connectWalletBtn, #connectWallet").forEach(e=>{e&&e.addEventListener("click",D)}),window.ethereum&&(window.ethereum.on("accountsChanged",he),window.ethereum.on("chainChanged",de))}async function me(){if(typeof window.ethereum>"u")throw new Error("Web3未正确加载")}async function he(r){try{if(r.length===0){f("钱包已断开连接","warning"),z(),window.location.reload();return}const e=r[0];if(e===d)return;window.accountChangeTimeout&&clearTimeout(window.accountChangeTimeout),window.accountChangeTimeout=setTimeout(async()=>{try{await B(),f("钱包账户已切换，正在重新验证...","info"),await D();const t=document.getElementById("walletAddress");t&&(t.textContent=e),await O(e,"accountChanged")}catch(t){S(t,"账户切换处理失败")}},500)}catch(e){S(e,"处理账户变更失败")}}function de(){f("区块链网络已变更，正在刷新页面...","info"),window.location.reload()}window.connectWallet=D;window.selectRole=le;window.showToast=f;document.addEventListener("DOMContentLoaded",ue);let v=null;function _(){if(!v)try{v=C.getInstance()}catch{return console.warn("Web3Helper尚未初始化，将在需要时再次尝试获取"),null}return v}function q(r,e,o){const t=document.getElementById(`${r}-transaction-status`);t&&(t.style.display="block");const n=document.getElementById(`${r}-status`);if(n&&(n.textContent=pe(e),n.className=`status-${e}`),o&&o.details&&o.details.hash){const s=document.getElementById(`${r}-hash`);s&&(s.textContent=`交易哈希: ${o.details.hash}`,s.style.display="block")}ge(`${r}-progress`,e)}function ge(r,e){const o=document.getElementById(r);if(!o)return;const n={preparing:10,submitted:30,mined:60,confirming:80,confirmed:100,success:100,error:100,failed:100}[e]||0;o.style.width=`${n}%`,e==="error"||e==="failed"?o.style.backgroundColor="#ff4d4d":e==="confirmed"||e==="success"?o.style.backgroundColor="#4caf50":o.style.backgroundColor="#2196f3"}function pe(r){return{preparing:"准备中...",submitted:"交易已提交，等待打包...",mined:"交易已被打包，等待确认...",confirming:"交易确认中...",confirmed:"交易已确认",success:"交易成功",error:"交易失败",failed:"交易执行失败"}[r]||r}function $e(r="tx-history-container"){try{const e=JSON.parse(localStorage.getItem("txHistory")||"[]"),o=document.getElementById(r);if(!o)return;if(e.length===0){o.innerHTML="<p>暂无交易记录</p>";return}const n=e.sort((s,i)=>new Date(i.timestamp)-new Date(s.timestamp)).slice(0,10);o.innerHTML="",n.forEach(s=>{const i=document.createElement("div");i.className=`tx-item tx-${s.status}`;const l=new Date(s.timestamp).toLocaleString();i.innerHTML=`
                <div class="tx-header">
                    <span class="tx-operation">${s.operation}</span>
                    <span class="tx-status">${ye(s.status)}</span>
                </div>
                <div class="tx-details">
                    <div class="tx-hash">交易哈希: ${s.hash.substring(0,10)}...</div>
                    <div class="tx-time">时间: ${l}</div>
                    ${s.blockNumber?`<div class="tx-block">区块: ${s.blockNumber}</div>`:""}
                    ${s.gasUsed?`<div class="tx-gas">Gas消耗: ${s.gasUsed}</div>`:""}
                </div>
            `,o.appendChild(i)})}catch(e){console.error("获取交易历史失败:",e)}}function ye(r){return{pending:"处理中",success:"成功",failed:"失败",error:"错误"}[r]||r}async function be(r,e,o,t=null){try{const n=_();if(!n)throw new Error("Web3Helper未初始化，请先连接钱包");if(f("正在准备添加学生操作...","info"),!r||!e)throw new Error("学生ID和姓名不能为空");if(!n.isValidAddress(o))throw new Error("无效的钱包地址格式");return await n.executeContractMethod("addStudent",[r,e,o],{operationName:"添加学生",confirmationMessage:`您正在添加学生: ID=${r}, 姓名=${e}
此操作将上链并消耗gas费用，是否确认？`,onProgress:i=>{console.log("交易进度:",i),q("student",i.stage,i),i.stage==="confirmed"?f("学生添加成功!","success"):i.stage==="error"&&f(`添加失败: ${i.details.error.message}`,"error")},onSuccess:i=>{if(console.log("交易成功:",i),i.events.StudentAdded){const l=i.events.StudentAdded;console.log("学生添加事件:",l)}t&&typeof t=="function"&&t(i)}})}catch(n){throw console.error("添加学生操作失败:",n),f(`操作失败: ${n.message}`,"error"),n}}async function ke(r,e,o,t=null){try{const n=_();if(!n)throw new Error("Web3Helper未初始化，请先连接钱包");if(f("正在准备更新成绩操作...","info"),!r||!e)throw new Error("学生ID和科目不能为空");if(isNaN(o)||o<0||o>100)throw new Error("分数必须在0-100之间");return await n.executeContractMethod("updateScore",[r,e,o],{operationName:"更新学生成绩",confirmationMessage:`您正在更新学生(ID=${r})的${e}成绩为${o}分
此操作将上链并消耗gas费用，是否确认？`,onProgress:i=>{console.log("交易进度:",i),q("score",i.stage,i)},onSuccess:i=>{if(console.log("交易成功:",i),f(`成绩更新成功: ${e} = ${o}分`,"success"),i.events.ScoreUpdated){const l=i.events.ScoreUpdated;console.log("成绩更新事件:",l)}t&&typeof t=="function"&&t(i)},onError:i=>{console.error("交易失败:",i),f(`成绩更新失败: ${i.error}`,"error")}})}catch(n){throw console.error("更新成绩操作失败:",n),f(`操作失败: ${n.message}`,"error"),n}}async function Ie(r,e){try{const o=await contract.methods.addTeacher(r).send({from:currentAccount});return o.status&&e&&await e(),{success:!0,result:o}}catch(o){return console.error("添加教师交易失败:",o),{success:!1,error:o}}}export{C as W,D as a,P as b,d as c,$e as d,be as e,Ie as f,B as i,le as s,ke as u,b as w};
